{of the two versions of basictris, this is based off the maximite version
 as it suports graphics, and is not done in text mode.  custom commands
 were written to make porting easyer, which mimic the and print statements
 used in the color maximite's MMbasic.  The Color maximite is a Pic 32 Microcontroler
 with 128K of memory.  The MBC2 is a 8 bit full fledged CPU with on board 128K
 of memory.  useing the PiGFX interface, and translateing the code to pascal
 to take advantage of mechine code generated by the single pass compiler,
 we can get a speed advantage over an interpritave language runing on the
 faster chip. also added sound and joystick support to the original code to
 allow for a more fun experience!

 a bitmap font was used (loaded as bitmaps only to the interface memory directly
 off the disk) to properly position text on the screen useing generally the same
 locations as the maximite build. 
 since the computer lacks a timer, in that we can get a milisecond refrence timer 
 that is always running which can be reset, I had to resort to a software conunter.  
 the timing all being under a second in the original program meant that I could not 
 use the real time clock which only has seconds resolution the since the actual 
 loops in the program are used they had to be tweekd to make it work close to the 
 orignal, also asume a 8mhz clock speed

 (** UPDATE **) the MBC2TRIS.PAS version uses a timer derived from the ATMEGA32's 
 timer by way of a hacked millis(); opcode.  it is under read codes at 0x88. please 
 see the new time.pas library for details. this version requires a Z80-MBC2 running
 that hacked sketch. it is used both for timeing piece drops, as well as debounceing 
 the joystick.  I've also added a seprate graphics loader which loads the bitmaps to 
 the graphics interface and then unloads itself from memory. the main program will also 
 unload the routines that initally program the two pregenerated arrays from memory as 
 well.

 the pieces were drawn useing linedraw primitives on the maximite version.  I
 wish I had re-coded the source to use the line commands built into pi-gfx but
 at the last minute I decided to set up RLE bitmaps to build the peice components
 my guess is that they would have probably worked just as well but I was getting
 frustrated with my maximite cloned line draw proceadure which, though commented
 out is still in the graph4 includable library.  It was very slow, because of all
 the calculations required to make the statements as close to the original source
 as possible.

 collisions detection and sprites are tracked in the host computer it runs just
 as fast as expected even without hardware sprites.  collision detection though
 included with PiGFX only lets you know if onscreen sprites have collieded. there
 are far to many inseidences where detecting a collison before it is drawn is
 needed. I do not know what it would take to implement that as a feature on the
 PiGFX but it would be very usefull. additionally blanking and redrawing the
 playfield is fast enough that hardware sprites were really not needed, and as
 I had used many of the bitmaps for fonts It didn't seem like it was worth the
 extra work.

 to compile under a different platform, say the RC2014, you would need a PiGFX
 interface running the newest version of the firmware and use the bgraph4.pas 
 library.  also do not enable the joystick / sound as there is no way to currently
 remove them from the source depending on your specific configureation it may cause
 issues.}

